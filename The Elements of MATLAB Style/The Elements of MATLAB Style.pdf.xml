<?xml version="1.0" encoding="utf-8"?>
<BookmarkExport>
  <Item ID="1" Name="Cover" Page="1" Open="0" />
  <Item ID="2" Name="Half-title" Page="3" Open="0" />
  <Item ID="3" Name="Title" Page="5" Open="0" />
  <Item ID="4" Name="Copyright" Page="6" Open="0" />
  <Item ID="5" Name="Contents" Page="7" Open="0" />
  <Item ID="6" Name="Preface" Page="11" Open="0">
    <Item ID="7" Name="Audience" Page="11" Open="0" />
  </Item>
  <Item ID="8" Name="Introduction" Page="13" Open="0">
    <Item ID="9" Name="Disclaimer" Page="15" Open="0" />
  </Item>
  <Item ID="10" Name="1. General Principles" Page="16" Open="0">
    <Item ID="11" Name="1. Avoid Causing Confusion" Page="16" Open="0" />
    <Item ID="12" Name="2. Avoid Throw-Away Code" Page="17" Open="0" />
    <Item ID="13" Name="3. Help the Reader" Page="17" Open="0" />
    <Item ID="14" Name="4. Maintain the Style of the Original" Page="17" Open="0" />
    <Item ID="15" Name="5. Document Style Deviations" Page="18" Open="0" />
  </Item>
  <Item ID="16" Name="2. Formatting" Page="19" Open="0">
    <Item ID="17" Name="Layout" Page="19" Open="0">
      <Item ID="18" Name="6. Keep Content Within the First Eighty Columns" Page="19" Open="0" />
      <Item ID="19" Name="7. Split Long Code Lines at Graceful Points" Page="20" Open="0" />
      <Item ID="20" Name="8. Indent Statement Groups Three or Four Spaces" Page="20" Open="0" />
      <Item ID="21" Name="9. Indent Consistently with the MATLAB Editor" Page="21" Open="0" />
      <Item ID="22" Name="10. Do Not Use Hard Tabs" Page="21" Open="0" />
      <Item ID="23" Name="11. Put Only One Executable Statement in a Line of Code" Page="22" Open="0" />
      <Item ID="24" Name="12. Define Each Variable on a Separate Line" Page="22" Open="0" />
      <Item ID="25" Name="13. Use Argument Alignment if it Enhances Readability" Page="23" Open="0" />
      <Item ID="26" Name="14. Avoid Heavily Nested Code" Page="24" Open="0" />
    </Item>
    <Item ID="27" Name="White Space" Page="24" Open="0">
      <Item ID="28" Name="15. Include White Space" Page="24" Open="0" />
      <Item ID="29" Name="16. Surround =, &amp;, |, &amp;&amp;, and || by Spaces" Page="24" Open="0" />
      <Item ID="30" Name="17. Use White Space Around Operators When it Enhances Readability" Page="25" Open="0" />
      <Item ID="31" Name="18. Follow Commas with a Space When it Enhances Readability" Page="26" Open="0" />
      <Item ID="32" Name="19. Insert Spaces for Multiple Commands in One Line" Page="26" Open="0" />
      <Item ID="33" Name="20. Do Not Put Spaces Just Inside Parentheses" Page="27" Open="0" />
      <Item ID="34" Name="21. Do Not Follow Function Names With a Space" Page="27" Open="0" />
      <Item ID="35" Name="22. Do Not Space Out Semicolons at the End of Lines" Page="27" Open="0" />
    </Item>
    <Item ID="36" Name="Code Blocks" Page="27" Open="0">
      <Item ID="37" Name="23. Break Code of Any Appreciable Length into Blocks" Page="27" Open="0" />
      <Item ID="38" Name="24. Separate Logical Groups of Statements Within a Block by One Blank Line" Page="28" Open="0" />
      <Item ID="39" Name="25. Separate Major Code Blocks by More Than One Blank Line" Page="28" Open="0" />
      <Item ID="40" Name="26. Separate Subfunctions by More Than One Blank Line" Page="28" Open="0" />
      <Item ID="41" Name="27. Use Editor Cells" Page="28" Open="0" />
    </Item>
    <Item ID="42" Name="Formatting Summary" Page="29" Open="0" />
  </Item>
  <Item ID="43" Name="3. Naming" Page="30" Open="0">
    <Item ID="44" Name="General" Page="31" Open="0">
      <Item ID="45" Name="28. Use Meaningful Names" Page="31" Open="0" />
      <Item ID="46" Name="29. Use Familiar Names" Page="32" Open="0" />
      <Item ID="47" Name="30. Use Consistent Names" Page="32" Open="0" />
      <Item ID="48" Name="31. Avoid Excessively Long Names" Page="33" Open="0" />
      <Item ID="49" Name="32. Avoid Cryptic Abbreviations" Page="33" Open="0" />
      <Item ID="50" Name="33. Treat Familiar Acronyms as Words" Page="34" Open="0" />
      <Item ID="51" Name="34. Avoid Names that Differ Only by Capitalization" Page="34" Open="0" />
      <Item ID="52" Name="35. Avoid Names that Differ Only by One Letter" Page="35" Open="0" />
      <Item ID="53" Name="36. Avoid Names with Hard-to-Read Character Sequences" Page="35" Open="0" />
      <Item ID="54" Name="37. Make Names Pronounceable When You Can" Page="36" Open="0" />
      <Item ID="55" Name="38. Write Names in English" Page="36" Open="0" />
    </Item>
    <Item ID="56" Name="Variables and Parameters" Page="36" Open="0">
      <Item ID="57" Name="39. Avoid Ambiguous or Vague Names" Page="36" Open="0" />
      <Item ID="58" Name="40. Name According to Meaning, Not Type" Page="37" Open="0" />
      <Item ID="59" Name="41. Use Lowercase for Simple Variable Names" Page="37" Open="0" />
      <Item ID="60" Name="42. Use lowerCamelCase for Compound Variable Names" Page="37" Open="0" />
      <Item ID="61" Name="43. Use Meaningful Names for Variables with a Large Scope" Page="38" Open="0" />
      <Item ID="62" Name="44. Limit Use of Very Short Names to Variables with a Small Scope" Page="38" Open="0" />
      <Item ID="63" Name="45. Be Consistent With i and j" Page="39" Open="0" />
      <Item ID="64" Name="46. Use the Prefix n for Variables Representing the Number of Entities" Page="39" Open="0" />
      <Item ID="65" Name="47. Follow a Consistent Convention on Pluralization" Page="39" Open="0" />
      <Item ID="66" Name="48. Use the Prefix this for the Current Variable" Page="40" Open="0" />
      <Item ID="67" Name="49. Use the Suffix No or Prefix i for Variables Representing a Single Entity Number" Page="40" Open="0" />
      <Item ID="68" Name="50. Prefix Iterator Variables with i, j, k, etc." Page="41" Open="0" />
      <Item ID="69" Name="51. Embed is, has, etc., in Boolean Variable Names" Page="41" Open="0" />
      <Item ID="70" Name="52. Avoid Negated Boolean Variable Names" Page="42" Open="0" />
      <Item ID="71" Name="53. Use the Expected Logical Names and Values" Page="42" Open="0" />
      <Item ID="72" Name="54. Avoid Using a Keyword or Special Value Name for a Variable Name" Page="43" Open="0" />
      <Item ID="73" Name="55. Avoid Hungarian Notation" Page="43" Open="0" />
      <Item ID="74" Name="56. Avoid Variable Names that Shadow Functions" Page="44" Open="0" />
      <Item ID="75" Name="57. Avoid Reusing a Variable for Different Contents" Page="44" Open="0" />
      <Item ID="76" Name="58. Consider a Unit Suffix for Names of Dimensioned Quantities" Page="45" Open="0" />
    </Item>
    <Item ID="77" Name="Constants" Page="45" Open="0">
      <Item ID="78" Name="59. Use All Uppercase for Constant Names with Local Scope" Page="45" Open="0" />
      <Item ID="79" Name="60. Use Function Names for Constants Defined by Functions" Page="46" Open="0" />
      <Item ID="80" Name="61. Use Meaningful Names for Constants" Page="46" Open="0" />
      <Item ID="81" Name="62. Define Related Constants Based on the Relation" Page="47" Open="0" />
      <Item ID="82" Name="63. Consider Using a Category Prefix" Page="47" Open="0" />
    </Item>
    <Item ID="83" Name="Structures and Cell Arrays" Page="47" Open="0">
      <Item ID="84" Name="64. Use UpperCamelCase for Structure Names" Page="47" Open="0" />
      <Item ID="85" Name="65. Do Not Include the Name of the Structure in a Fieldname" Page="47" Open="0" />
      <Item ID="86" Name="66. Use Fieldnames that Follow the Naming Convention for Variables" Page="48" Open="0" />
      <Item ID="87" Name="67. Name Cell Arrays Following the Style for Variables" Page="48" Open="0" />
    </Item>
    <Item ID="88" Name="Functions" Page="49" Open="0">
      <Item ID="89" Name="68. Give Functions Meaningful Names" Page="49" Open="0" />
      <Item ID="90" Name="69. Name Functions for What They Do" Page="50" Open="0" />
      <Item ID="91" Name="70. Follow a Case Convention for Function Names" Page="50" Open="0" />
      <Item ID="92" Name="71. Reserve the Prefixes get/set for Accessing an Object Property" Page="51" Open="0" />
      <Item ID="93" Name="72. Use Expected Verbs in Expected Ways" Page="51" Open="0" />
      <Item ID="94" Name="73. Use the Prefix is for Boolean Functions" Page="52" Open="0" />
      <Item ID="95" Name="74. Use Complement Prefixes in Compound Names for Complement Operations" Page="53" Open="0" />
      <Item ID="96" Name="75. Be Selective in the Use of Numbers at the Ends of Names" Page="53" Open="0" />
      <Item ID="97" Name="76. Use Numbers Inside Function Names Only for Common Conventions" Page="53" Open="0" />
      <Item ID="98" Name="77. Avoid Unintentional Shadowing" Page="54" Open="0" />
    </Item>
    <Item ID="99" Name="Classes" Page="54" Open="0">
      <Item ID="100" Name="78. Use Nouns When Naming Classes" Page="54" Open="0" />
      <Item ID="101" Name="79. Use UpperCamelCase for MATLAB Class and Object Names" Page="55" Open="0" />
      <Item ID="102" Name="80. Use UpperCamelCase for Exception Names" Page="55" Open="0" />
      <Item ID="103" Name="81. Name Properties Like Structure Fields" Page="55" Open="0" />
      <Item ID="104" Name="82. Name Methods Like Functions" Page="56" Open="0" />
      <Item ID="105" Name="83. Name Accessor Methods after their Properties" Page="56" Open="0" />
      <Item ID="106" Name="84. Use a Single Lowercase Word as the Root Name of a Package" Page="57" Open="0" />
    </Item>
    <Item ID="107" Name="Data Files and Directories" Page="57" Open="0">
      <Item ID="108" Name="85. Use Directory and Filenames that are Easy to Work with" Page="57" Open="0" />
      <Item ID="109" Name="86. Use Sortable Numbering in Data Filenames" Page="57" Open="0" />
      <Item ID="110" Name="87. Use ISO Date Format" Page="59" Open="0" />
    </Item>
    <Item ID="111" Name="Naming Summary" Page="60" Open="0" />
  </Item>
  <Item ID="112" Name="4. Documentation" Page="61" Open="0">
    <Item ID="113" Name="General" Page="61" Open="0">
      <Item ID="114" Name="88. Provide Well-Written Code" Page="61" Open="0" />
      <Item ID="115" Name="89. Document Each Module Before or During Its Implementation" Page="61" Open="0" />
      <Item ID="116" Name="90. Document the Interface for Those Who Will Use It" Page="62" Open="0" />
      <Item ID="117" Name="91. Document the Design and Implementation for Those Who Will Maintain It" Page="62" Open="0" />
      <Item ID="118" Name="92. Consider Documenting Some Changes in Header Comments" Page="62" Open="0" />
      <Item ID="119" Name="93. Generate HTML Reference Pages" Page="63" Open="0" />
      <Item ID="120" Name="94. Integrate the Reference Pages with the Help Browser" Page="63" Open="0" />
      <Item ID="121" Name="95. Consider Providing PDF Documentation" Page="63" Open="0" />
    </Item>
    <Item ID="122" Name="Comments" Page="63" Open="0">
      <Item ID="123" Name="96. Make Comments Useful" Page="64" Open="0" />
      <Item ID="124" Name="97. Be Sure that Comments Agree with the Code" Page="64" Open="0" />
      <Item ID="125" Name="98. Revise Comments to be Correct When the Code is Changed" Page="65" Open="0" />
      <Item ID="126" Name="99. Put Restrictions in the Code, Not the Comments" Page="66" Open="0" />
      <Item ID="127" Name="100. Clean up Commented Out Code before Release" Page="66" Open="0" />
      <Item ID="128" Name="101. Make Comments Easy to Read" Page="67" Open="0" />
      <Item ID="129" Name="102. Write Comments for the Publish Feature" Page="67" Open="0" />
      <Item ID="130" Name="103. Minimize Use of End-Line Comments" Page="67" Open="0" />
      <Item ID="131" Name="104. Consider End-of-Loop Comments" Page="68" Open="0" />
      <Item ID="132" Name="105. Consider Documenting Important Variables Near the Start of the File" Page="68" Open="0" />
      <Item ID="133" Name="106. Consider Documenting Constant Assignments Where They are Defined" Page="68" Open="0" />
      <Item ID="134" Name="107. Use Voice and Person Appropriately" Page="69" Open="0" />
      <Item ID="135" Name="108. Use Present Tense to Describe Code" Page="69" Open="0" />
      <Item ID="136" Name="109. Use Complete Sentences in Descriptive Blocks" Page="69" Open="0" />
      <Item ID="137" Name="110. You Can Use Incomplete Sentences in One-Liners" Page="70" Open="0" />
      <Item ID="138" Name="111. Use Short Words" Page="70" Open="0" />
      <Item ID="139" Name="112. Eliminate Cute Comments" Page="70" Open="0" />
      <Item ID="140" Name="113. Minimize the Use of ASCII Art" Page="70" Open="0" />
      <Item ID="141" Name="114. Write All Comments in English" Page="70" Open="0" />
      <Item ID="142" Name="115. Format the Header Comments for Easy Publishing as Documentation" Page="71" Open="0" />
      <Item ID="143" Name="116. Put the Header Comments in the Right Place" Page="73" Open="0" />
      <Item ID="144" Name="117. Use Title Markup for the Function Name" Page="73" Open="0" />
      <Item ID="145" Name="118. Document the Function Interface in the Syntax Section" Page="73" Open="0" />
      <Item ID="146" Name="119. Use the Actual Function Name Case in Comments" Page="74" Open="0" />
      <Item ID="147" Name="120. Describe the Function Arguments in the Description Section" Page="75" Open="0" />
      <Item ID="148" Name="121. Describe Any Function Side Effects" Page="76" Open="0" />
      <Item ID="149" Name="122. Describe Any Custom Exceptions that May be Generated" Page="76" Open="0" />
      <Item ID="150" Name="123. Include Examples in the Header Comments" Page="76" Open="0" />
      <Item ID="151" Name="124. Include See also in the Header Comments" Page="76" Open="0" />
      <Item ID="152" Name="125. Avoid Clutter in the Reference Page" Page="77" Open="0" />
      <Item ID="153" Name="126. Format Header Comments of classdef Files for the Help Browser" Page="77" Open="0" />
      <Item ID="154" Name="127. Clarify Subclass Methods" Page="78" Open="0" />
      <Item ID="155" Name="128. Indent Block Comments to Match Code" Page="78" Open="0" />
      <Item ID="156" Name="129. Place a Blank Line or Cell Break before a Block Comment" Page="78" Open="0" />
      <Item ID="157" Name="130. Do Not Use Comment Blocks for Block Comments" Page="79" Open="0" />
      <Item ID="158" Name="131. Use Comment Block Syntax to Temporarily Bypass a Block of Code" Page="80" Open="0" />
      <Item ID="159" Name="132. Indent Comments with the Code Block" Page="81" Open="0" />
      <Item ID="160" Name="133. Do Not Follow a Single-Line Comment with a Blank Line" Page="81" Open="0" />
      <Item ID="161" Name="134. Resolve TODO/FIXME Comments" Page="81" Open="0" />
    </Item>
    <Item ID="162" Name="Documentation Summary" Page="81" Open="0" />
  </Item>
  <Item ID="163" Name="5. Programming" Page="83" Open="0">
    <Item ID="164" Name="General" Page="83" Open="0">
      <Item ID="165" Name="135. Avoid Cryptic Code" Page="83" Open="0" />
      <Item ID="166" Name="136. Avoid Off-By-One Mistakes" Page="84" Open="0" />
      <Item ID="167" Name="137. Attend to NaN Results" Page="84" Open="0" />
      <Item ID="168" Name="138. Consider Using isfinite" Page="84" Open="0" />
      <Item ID="169" Name="139. Use Programming Patterns or Idioms" Page="84" Open="0" />
    </Item>
    <Item ID="170" Name="Variables and Constants" Page="85" Open="0">
      <Item ID="171" Name="140. Do Not Reuse Variable Names Unless Required by Memory Limitation" Page="85" Open="0" />
      <Item ID="172" Name="141. Beware of Mistyping Variable Names" Page="85" Open="0" />
      <Item ID="173" Name="142. Minimize the Use of Literal Numbers in Statements" Page="86" Open="0" />
      <Item ID="174" Name="143. Write Floating Point Values with a Digit Before the Decimal Point" Page="87" Open="0" />
      <Item ID="175" Name="144. Avoid Showing Excessive Decimal Places" Page="87" Open="0" />
      <Item ID="176" Name="145. Avoid Mixing Units within a Program" Page="87" Open="0" />
      <Item ID="177" Name="146. Use Caution with Floating Point Comparisons" Page="88" Open="0" />
      <Item ID="178" Name="147. Limit Boolean Variable Values to True or False" Page="88" Open="0" />
      <Item ID="179" Name="148. Do Not Assume Array Size" Page="89" Open="0" />
      <Item ID="180" Name="149. Use Appropriate Numerical Class Conversions" Page="89" Open="0" />
      <Item ID="181" Name="150. Minimize the Use of Global Variables" Page="90" Open="0" />
      <Item ID="182" Name="151. Minimize the Use of Global Constants" Page="91" Open="0" />
      <Item ID="183" Name="152. Define Local Constants Only Once" Page="92" Open="0" />
      <Item ID="184" Name="153. Do Not Declare Unrelated Variables in a Single Line" Page="92" Open="0" />
    </Item>
    <Item ID="185" Name="Character Strings" Page="93" Open="0">
      <Item ID="186" Name="154. Consider Using strcmpi" Page="93" Open="0" />
      <Item ID="187" Name="155. Use lower or upper When You Cannot Use strcmpi" Page="93" Open="0" />
      <Item ID="188" Name="156. Use isempty" Page="93" Open="0" />
      <Item ID="189" Name="157. Use fullfile" Page="94" Open="0" />
      <Item ID="190" Name="158. Compute with Numbers for Speed" Page="94" Open="0" />
      <Item ID="191" Name="159. Consider Using Character Arrays for Speed" Page="94" Open="0" />
      <Item ID="192" Name="160. Consider Using unique" Page="95" Open="0" />
    </Item>
    <Item ID="193" Name="Structures" Page="95" Open="0">
      <Item ID="194" Name="161. Use Structures for Associated Data" Page="95" Open="0" />
      <Item ID="195" Name="162. Use Structures for Metadata" Page="95" Open="0" />
      <Item ID="196" Name="163. Organize a Structure Based on How It Will be Accessed" Page="96" Open="0" />
      <Item ID="197" Name="164. Put Structure Fields in a Helpful Order" Page="96" Open="0" />
      <Item ID="198" Name="165. Be Careful with Fieldnames" Page="96" Open="0" />
    </Item>
    <Item ID="199" Name="Cell Arrays" Page="97" Open="0">
      <Item ID="200" Name="166. Consider Using Cell Arrays for Strings" Page="97" Open="0" />
      <Item ID="201" Name="167. Look Out for Cells within Cells" Page="98" Open="0" />
      <Item ID="202" Name="168. Consider Using Cell Arrays for Ragged Arrays" Page="98" Open="0" />
    </Item>
    <Item ID="203" Name="Expressions" Page="99" Open="0">
      <Item ID="204" Name="169. Write Short Expressions" Page="99" Open="0" />
      <Item ID="205" Name="170. Put Numbers Before the Multiplication Operator" Page="100" Open="0" />
      <Item ID="206" Name="171. Make the Denominator Clear" Page="100" Open="0" />
      <Item ID="207" Name="172. Use Parentheses" Page="100" Open="0" />
      <Item ID="208" Name="173. Use a Clear Form for Relational Expressions" Page="101" Open="0" />
      <Item ID="209" Name="174. Use &amp;&amp; or || by Default for Scalar Operands" Page="102" Open="0" />
    </Item>
    <Item ID="210" Name="Statements" Page="102" Open="0">
      <Item ID="211" Name="175. Write Short Statements" Page="102" Open="0" />
      <Item ID="212" Name="176. Avoid Use of eval When Possible" Page="102" Open="0" />
    </Item>
    <Item ID="213" Name="Loops" Page="103" Open="0">
      <Item ID="214" Name="177. Initialize Loop Variables Immediately Before the Loop" Page="103" Open="0" />
      <Item ID="215" Name="178. Initialize Using nan or false Rather Than zeros" Page="104" Open="0" />
      <Item ID="216" Name="179. Do Not Change the Loop Index Variable Inside a Loop" Page="104" Open="0" />
      <Item ID="217" Name="180. Minimize the Use of break in Loops" Page="104" Open="0" />
      <Item ID="218" Name="181. Minimize the Use of continue in Loops" Page="105" Open="0" />
      <Item ID="219" Name="182. Avoid Unnecessary Computation within Loops" Page="106" Open="0" />
      <Item ID="220" Name="183. Be Careful of Infinite while Loops" Page="107" Open="0" />
      <Item ID="221" Name="184. Be Careful of Count Errors in while Loops" Page="107" Open="0" />
    </Item>
    <Item ID="222" Name="Conditionals" Page="108" Open="0">
      <Item ID="223" Name="185. Avoid Complicated Conditional Expressions" Page="108" Open="0" />
      <Item ID="224" Name="186. In General, Include an else Statement with if" Page="108" Open="0" />
      <Item ID="225" Name="187. Put the Normal Branch in the if Part" Page="109" Open="0" />
      <Item ID="226" Name="188. Avoid Unnecessary if Constructs" Page="109" Open="0" />
      <Item ID="227" Name="189. Use a Practical Order for elseif Conditions" Page="110" Open="0" />
      <Item ID="228" Name="190. Avoid Unnecessary elseif Blocks" Page="110" Open="0" />
      <Item ID="229" Name="191. Avoid Unnecessary Levels of Nesting in Control Structures" Page="111" Open="0" />
      <Item ID="230" Name="192. Try to Simplify Nested if Constructs" Page="112" Open="0" />
      <Item ID="231" Name="193. Avoid the Conditional Expression if 0" Page="112" Open="0" />
      <Item ID="232" Name="194. Include otherwise with switch Statements" Page="113" Open="0" />
      <Item ID="233" Name="195. Consider Using a Cell Array to Simplify a switch Construct" Page="113" Open="0" />
      <Item ID="234" Name="196. Use if When the Condition is Most Clearly Written as an Expression" Page="114" Open="0" />
      <Item ID="235" Name="197. Use switch When the Condition is Most Clearly Written as a Value" Page="114" Open="0" />
      <Item ID="236" Name="198. When Either if or switch Can Work, Use the More Readable One" Page="114" Open="0" />
    </Item>
    <Item ID="237" Name="Logical Functions" Page="115" Open="0">
      <Item ID="238" Name="199. Use logical to Cast Variables" Page="115" Open="0" />
      <Item ID="239" Name="200. Use true or false Functions and Values" Page="115" Open="0" />
      <Item ID="240" Name="201. In General Use isequal Rather Than ==" Page="115" Open="0" />
    </Item>
    <Item ID="241" Name="Vectorization" Page="116" Open="0">
      <Item ID="242" Name="202. Be Thoughtful with Vectorization" Page="116" Open="0" />
      <Item ID="243" Name="203. Use repmat" Page="117" Open="0" />
    </Item>
    <Item ID="244" Name="Functions" Page="117" Open="0">
      <Item ID="245" Name="204. Modularize" Page="117" Open="0" />
      <Item ID="246" Name="205. Write Code as Functions When Possible" Page="118" Open="0" />
      <Item ID="247" Name="206. Write Simple Functions" Page="118" Open="0" />
      <Item ID="248" Name="207. Design for Loose Coupling" Page="118" Open="0" />
      <Item ID="249" Name="208. Use Subfunctions Appropriately" Page="119" Open="0" />
      <Item ID="250" Name="209. Hide Implementation Details" Page="119" Open="0" />
      <Item ID="251" Name="210. Write for High Cohesion" Page="119" Open="0" />
      <Item ID="252" Name="211. Use Existing Functions" Page="120" Open="0" />
      <Item ID="253" Name="212. Eliminate Overlapping Functions" Page="120" Open="0" />
      <Item ID="254" Name="213. Provide Some Generality in Functions" Page="120" Open="0" />
      <Item ID="255" Name="214. Write a Function At One Level of Abstraction" Page="120" Open="0" />
      <Item ID="256" Name="215. Write Convenience Functions" Page="121" Open="0" />
      <Item ID="257" Name="216. Make Interaction Clear" Page="122" Open="0" />
      <Item ID="258" Name="217. Name All Input Arguments" Page="122" Open="0" />
      <Item ID="259" Name="218. Write Boolean Functions to Return true or false" Page="122" Open="0" />
      <Item ID="260" Name="219. Make Logical Output and Function Name Consistent" Page="122" Open="0" />
      <Item ID="261" Name="220. Minimize Input Flag Arguments" Page="123" Open="0" />
      <Item ID="262" Name="221. Write Arguments in Useful Order" Page="123" Open="0" />
      <Item ID="263" Name="222. Use Lazy Evaluation" Page="124" Open="0" />
      <Item ID="264" Name="223. Make Input and Output Arrays Consistent" Page="124" Open="0" />
      <Item ID="265" Name="224. Use a Structure to Replace a Long List of Function Arguments" Page="124" Open="0" />
      <Item ID="266" Name="225. Consider an Options Structure" Page="125" Open="0" />
      <Item ID="267" Name="226. Consider varargin and varargout" Page="125" Open="0" />
      <Item ID="268" Name="227. Use Parameter-Value Pairs for Optional, Unordered Input Arguments" Page="126" Open="0" />
      <Item ID="269" Name="228. In General, Use Caller Variable Names Consistent with the Function Argument Names" Page="126" Open="0" />
      <Item ID="270" Name="229. Define Imports Where They are Easy to Find" Page="127" Open="0" />
      <Item ID="271" Name="230. Use Anonymous Functions Rather Than Inline Functions" Page="127" Open="0" />
      <Item ID="272" Name="231. Use Function Handles" Page="127" Open="0" />
      <Item ID="273" Name="232. Avoid Including Hidden Side Effects" Page="127" Open="0" />
      <Item ID="274" Name="233. Refactor" Page="128" Open="0" />
    </Item>
    <Item ID="275" Name="Input and Output" Page="128" Open="0">
      <Item ID="276" Name="234. Write Input Functions" Page="128" Open="0" />
      <Item ID="277" Name="235. Provide Some Input Validity Checking" Page="129" Open="0" />
      <Item ID="278" Name="236. Expect NaN Values in Data" Page="129" Open="0" />
      <Item ID="279" Name="237. Use feof for Reading Files" Page="129" Open="0" />
      <Item ID="280" Name="238. Make Output Modules" Page="130" Open="0" />
      <Item ID="281" Name="239. Format Output for Easy Use" Page="130" Open="0" />
      <Item ID="282" Name="240. Provide for Automation" Page="130" Open="0" />
    </Item>
    <Item ID="283" Name="Classes and Objects" Page="131" Open="0">
      <Item ID="284" Name="241. Keep Classes Simple" Page="131" Open="0" />
      <Item ID="285" Name="242. Avoid Classes with Ambiguous Overlap" Page="132" Open="0" />
      <Item ID="286" Name="243. Construct Valid Objects" Page="133" Open="0" />
      <Item ID="287" Name="244. Follow Constructor Conventions" Page="133" Open="0" />
      <Item ID="288" Name="245. Define Small, Simple Methods" Page="134" Open="0" />
      <Item ID="289" Name="246. Write Methods That You Can Unit Test" Page="134" Open="0" />
      <Item ID="290" Name="247. Do Not Write a Method That Can Produce an Invalid Property" Page="135" Open="0" />
      <Item ID="291" Name="248. Avoid Incomplete Public Methods" Page="135" Open="0" />
      <Item ID="292" Name="249. Try to Make Properties Private" Page="136" Open="0" />
      <Item ID="293" Name="250. Do Not Expose Properties with Behavior" Page="137" Open="0" />
      <Item ID="294" Name="251. Avoid Writing Methods with Many Input Arguments" Page="137" Open="0" />
      <Item ID="295" Name="252. Validate Method Argument Values" Page="137" Open="0" />
      <Item ID="296" Name="253. Check for a Property’s Existence Before Using It" Page="138" Open="0" />
      <Item ID="297" Name="254. Refactor Repeated Code Into Methods" Page="138" Open="0" />
      <Item ID="298" Name="255. Overload Standard Functions When Possible" Page="138" Open="0" />
      <Item ID="299" Name="256. Avoid Unconventional Usage of Overload Names" Page="138" Open="0" />
      <Item ID="300" Name="257. Do not Overload &amp;&amp; or ||" Page="139" Open="0" />
      <Item ID="301" Name="258. Do not Get Carried Away with Inheritance" Page="139" Open="0" />
      <Item ID="302" Name="259. Place Method Functions in Folders Consistently" Page="139" Open="0" />
      <Item ID="303" Name="260. Use Java Syntax for Java Methods" Page="139" Open="0" />
    </Item>
    <Item ID="304" Name="Exceptions, Errors, and Warnings" Page="140" Open="0">
      <Item ID="305" Name="261. Use Appropriate Error Handling" Page="140" Open="0" />
      <Item ID="306" Name="262. Prepare for Errors" Page="140" Open="0" />
      <Item ID="307" Name="263. Make Error Messages Informative" Page="141" Open="0" />
      <Item ID="308" Name="264. Use Message IDs with Errors and Warnings" Page="141" Open="0" />
      <Item ID="309" Name="265. Use Exceptions" Page="141" Open="0" />
      <Item ID="310" Name="266. Support Error Returns" Page="142" Open="0" />
      <Item ID="311" Name="267. Use Appropriate Assertions" Page="142" Open="0" />
    </Item>
    <Item ID="312" Name="Output Style" Page="143" Open="0">
      <Item ID="313" Name="268. Learn to Use sprintf" Page="143" Open="0" />
      <Item ID="314" Name="269. Learn to Use Tex" Page="143" Open="0" />
    </Item>
    <Item ID="315" Name="Tests" Page="143" Open="0">
      <Item ID="316" Name="270. Write at Least One Test for Every Function or Method" Page="144" Open="0" />
      <Item ID="317" Name="271. Write Small Tests" Page="144" Open="0" />
      <Item ID="318" Name="272. Write Uncoupled Tests" Page="145" Open="0" />
      <Item ID="319" Name="273. Write Tests with Boolean Outputs" Page="145" Open="0" />
      <Item ID="320" Name="274. Test for Expected Exceptions" Page="145" Open="0" />
      <Item ID="321" Name="275. Write Tests You Can Automate" Page="145" Open="0" />
      <Item ID="322" Name="276. Use Related Names in the Function and the Test Code" Page="146" Open="0" />
      <Item ID="323" Name="277. Identify Test Files by Name" Page="146" Open="0" />
      <Item ID="324" Name="278. Develop Test Patterns" Page="146" Open="0" />
      <Item ID="325" Name="279. Consider Tests for External Software" Page="147" Open="0" />
    </Item>
    <Item ID="326" Name="Data Files" Page="147" Open="0">
      <Item ID="327" Name="280. Make Use of mat Files" Page="147" Open="0" />
      <Item ID="328" Name="281. Follow Database Conventions" Page="147" Open="0" />
      <Item ID="329" Name="282. Follow the MATLAB Convention for Data Array Orientation" Page="148" Open="0" />
    </Item>
    <Item ID="330" Name="Programming Summary" Page="148" Open="0" />
  </Item>
  <Item ID="331" Name="6. Files and Organization" Page="150" Open="0">
    <Item ID="332" Name="Toolboxes" Page="150" Open="0">
      <Item ID="333" Name="284. Organize General-Purpose m-Files in Toolboxes" Page="150" Open="0" />
      <Item ID="334" Name="285. Put Test Files in a Separate Directory" Page="150" Open="0" />
      <Item ID="335" Name="286. Consider Writing Demo Files" Page="151" Open="0" />
      <Item ID="336" Name="287. Use a Consistent Toolbox Folder Organization" Page="151" Open="0" />
      <Item ID="337" Name="288. Provide for Integration with MATLAB" Page="151" Open="0" />
      <Item ID="338" Name="289. Provide a Reference Page for Every Public Function" Page="152" Open="0" />
      <Item ID="339" Name="290. Integrate the Reference Pages with the Help Browser" Page="152" Open="0" />
      <Item ID="340" Name="291. Do not Make Your Toolbox a Subfolder of the MATLAB Folder" Page="152" Open="0" />
    </Item>
    <Item ID="341" Name="Project Files" Page="152" Open="0">
      <Item ID="342" Name="292. Organize Your Project-Specific Files by Project Directory" Page="152" Open="0" />
      <Item ID="343" Name="293. Organize Your Data Directory for Ease of Access" Page="153" Open="0" />
    </Item>
    <Item ID="344" Name="Organization Summary" Page="154" Open="0" />
  </Item>
  <Item ID="345" Name="7. Development" Page="156" Open="0">
    <Item ID="346" Name="Design" Page="157" Open="0">
      <Item ID="347" Name="294. Expect Change" Page="157" Open="0" />
      <Item ID="348" Name="295. Include Appropriate Flexibility" Page="157" Open="0" />
      <Item ID="349" Name="296. Use the Right Algorithm" Page="158" Open="0" />
      <Item ID="350" Name="297. Program by Contract" Page="158" Open="0" />
      <Item ID="351" Name="298. Write for Automation" Page="158" Open="0" />
      <Item ID="352" Name="299. Make Associated Data Easy to Use" Page="158" Open="0" />
      <Item ID="353" Name="300. Recompute When Data Changes" Page="158" Open="0" />
      <Item ID="354" Name="301. Leave Code Optimization for Last or Never" Page="159" Open="0" />
      <Item ID="355" Name="302. Consider Coding Standards" Page="159" Open="0" />
    </Item>
    <Item ID="356" Name="Development Practices" Page="159" Open="0">
      <Item ID="357" Name="303. Develop in Small Steps" Page="160" Open="0" />
      <Item ID="358" Name="304. Develop in the Editor" Page="160" Open="0" />
      <Item ID="359" Name="305. Use Version Control" Page="160" Open="0" />
      <Item ID="360" Name="306. Run Tests Often" Page="160" Open="0" />
      <Item ID="361" Name="307. Run all Tests Before Release" Page="160" Open="0" />
    </Item>
    <Item ID="362" Name="MATLAB IDE Tools" Page="161" Open="0">
      <Item ID="363" Name="308. Try the MATLAB Editor" Page="161" Open="0" />
      <Item ID="364" Name="309. Use Smart Indent" Page="161" Open="0" />
      <Item ID="365" Name="310. Use Find and Replace" Page="162" Open="0" />
      <Item ID="366" Name="311. Pay Attention to M-Lint" Page="162" Open="0" />
      <Item ID="367" Name="312. Use Consistent Preference Settings" Page="162" Open="0" />
      <Item ID="368" Name="313. Use the Debugger Effectively" Page="162" Open="0" />
      <Item ID="369" Name="314. Use the TODO/FIXME Report" Page="163" Open="0" />
      <Item ID="370" Name="315. Use the Profiler" Page="163" Open="0" />
      <Item ID="371" Name="316. Use the Dependency Report" Page="164" Open="0" />
      <Item ID="372" Name="317. Publish During Development" Page="164" Open="0" />
      <Item ID="373" Name="318. Find a Desktop Layout That Works for You" Page="164" Open="0" />
    </Item>
    <Item ID="374" Name="Development Summary" Page="164" Open="0" />
  </Item>
  <Item ID="375" Name="Keywords" Page="167" Open="0" />
  <Item ID="376" Name="is∗ function list" Page="169" Open="0" />
  <Item ID="377" Name="Glossary" Page="171" Open="0" />
  <Item ID="378" Name="Bibliography" Page="177" Open="0" />
  <Item ID="379" Name="Index" Page="179" Open="0" />
</BookmarkExport>